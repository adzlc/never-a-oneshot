// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Campaign {
    id  String      @id @default(cuid())
    name            String
    description     String?
    story           String?
    world           World?
    players         PlayerCharacter[]
    npcs            Npc[]
    quests          Quest[]
    sessions        CampaignSession[]
    items           CampaignItem[]
    locations       Location[]

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    createdBy       User   @relation(fields: [createdById], references: [id])
    createdById     String

    @@index([name])
}

model World {
    id  String      @id @default(cuid())
    name            String
    description     String?
    campaign        Campaign   @relation(fields: [campaignId], references: [id])
    campaignId      String  @unique
    imageUrl        String?

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    @@index([name])
}

model Location {
    id  String      @id @default(cuid())
    name            String
    description     String?
    campaign        Campaign   @relation(fields: [campaignId], references: [id])
    campaignId      String  @unique
    imageUrl        String?

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    @@index([name])
}

model PlayerCharacter {
    id  String      @id @default(cuid())
    name            String
    backstory       String?
    race            String?
    class           String?
    campaign        Campaign   @relation(fields: [campaignId], references: [id])
    campaignId      String    
}

model Npc {
    id  String      @id @default(cuid())
    name            String
    description     String?
    allegiance      String?
    race            String?
    class           String?
    faction         String?
    quests          Quest[]
    campaign        Campaign   @relation(fields: [campaignId], references: [id])
    campaignId      String
    imageUrl        String?
}

model CampaignSession {
    id  String      @id @default(cuid())
    name            String
    overview        String?
    sessionDate     DateTime @default(now())
    campaign        Campaign   @relation(fields: [campaignId], references: [id])
    campaignId      String

    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    @@index([name])
}

model Quest {
    id  String      @id @default(cuid())
    name            String
    description     String?
    complete        Boolean @default(false)
    goldReward      Int?
    rewards         String?
    campaign        Campaign   @relation(fields: [campaignId], references: [id])
    campaignId      String    
    questGiver      Npc?   @relation(fields: [questGiverId], references: [id])
    questGiverId    String?
}

model CampaignItem {
    id  String      @id @default(cuid())
    name            String
    description     String?
    campaign        Campaign   @relation(fields: [campaignId], references: [id])
    campaignId      String       
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    campaigns     Campaign[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
